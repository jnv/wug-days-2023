openapi: 3.0.1
info:
  title: Meows API
  description: A sample API
  termsOfService: http://example.org/toc
  contact:
    name: Meow Meowson
    email: api@example.org
  license:
    name: Unlicense
    url: https://spdx.org/licenses/Unlicense.html
  version: v1
servers:
  - url: https://localhost:7106
    description: Current server
  - url: https://example.dev
    description: Sandbox
  - url: 'https://{region}.example.com'
    variables:
      region:
        default: eu
        enum:
          - eu
          - us
          - in
paths:
  /api/Pets:
    get:
      tags:
        - Pets
      operationId: Get
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
    post:
      tags:
        - Pets
      operationId: Post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PetRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/PetRequest'
      responses:
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  '/api/Pets/{id}':
    get:
      tags:
        - Pets
      operationId: Get
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
    put:
      tags:
        - Pets
      operationId: Put
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
          application/*+json:
            schema:
              $ref: '#/components/schemas/Pet'
      responses:
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
    delete:
      tags:
        - Pets
      operationId: Delete
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '200':
          description: Success
  /api/Reservations:
    get:
      tags:
        - Reservations
      operationId: Get
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reservation'
    post:
      tags:
        - Reservations
      operationId: Post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReservationRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ReservationRequest'
      responses:
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reservation'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  '/api/Reservations/{id}':
    get:
      tags:
        - Reservations
      operationId: Get
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reservation'
    put:
      tags:
        - Reservations
      operationId: Put
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Reservation'
          application/*+json:
            schema:
              $ref: '#/components/schemas/Reservation'
      responses:
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reservation'
    delete:
      tags:
        - Reservations
      operationId: Delete
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '200':
          description: Success
components:
  schemas:
    Pet:
      required:
        - id
        - kind
        - name
      type: object
      properties:
        id:
          minLength: 1
          type: string
        name:
          minLength: 1
          type: string
        kind:
          $ref: '#/components/schemas/PetKind'
        ownerEmail:
          type: string
          nullable: true
      additionalProperties: false
    PetKind:
      enum:
        - Cat
        - Dog
        - Hamster
      type: string
    PetRequest:
      type: object
      properties:
        name:
          type: string
          nullable: true
        kind:
          $ref: '#/components/schemas/PetKind'
        ownerEmail:
          type: string
          nullable: true
      additionalProperties: false
    ProblemDetails:
      type: object
      properties:
        type:
          type: string
          nullable: true
        title:
          type: string
          nullable: true
        status:
          type: integer
          format: int32
          nullable: true
        detail:
          type: string
          nullable: true
        instance:
          type: string
          nullable: true
      additionalProperties: { }
    Reservation:
      required:
        - endAt
        - guestsIds
        - id
        - startAt
      type: object
      properties:
        id:
          minLength: 1
          type: string
        startAt:
          type: string
          format: date-time
        endAt:
          type: string
          format: date-time
        guestsIds:
          minItems: 1
          type: array
          items:
            type: string
      additionalProperties: false
    ReservationRequest:
      required:
        - endAt
        - guestsIds
        - startAt
      type: object
      properties:
        startAt:
          type: string
          format: date-time
        endAt:
          type: string
          format: date-time
        guestsIds:
          minItems: 1
          type: array
          items:
            type: string
      additionalProperties: false
  securitySchemes:
    myKey:
      type: apiKey
      name: Api-Key
      in: header
security:
  - myKey: [ ]